Index: Program/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing ConfigReader;\r\nusing Newtonsoft.Json.Linq;\r\nusing Entity;\r\nusing Map;\r\nusing Database;\r\nusing Nest;\r\n\r\nnamespace Program\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var uri = new Uri(\"http://localhost:9200\");\r\n            var connectionSettings = new ConnectionSettings(uri);\r\n            var ok = new ElasticClient(connectionSettings);\r\n            RunModelsAndLinks();\r\n            RunRelations();\r\n            NestClientFactory.GetInstance().CreateInitialClient();\r\n\r\n            var query = new MatchAllQuery();\r\n\r\n            NestDataHandler.GetAllDocuments(query, \"documents1\");\r\n        }\r\n\r\n        static void RunModelsAndLinks()\r\n        {\r\n            var fileReader = new FileReader(\"Ontology.json\");\r\n            fileReader.LoadJsonFile();\r\n            var jsonObject = fileReader.GetJsonObject();\r\n            FindNodes(jsonObject);\r\n            FindLinks(jsonObject);\r\n        }\r\n\r\n        static void FindNodes(JToken jsonObject)\r\n        {\r\n            var parser = new JsonParser();\r\n            var nodes = parser.GetNodes(jsonObject).ToList();\r\n            InitialiseModels(parser, nodes);\r\n        }\r\n\r\n        static void InitialiseModels(JsonParser parser, List<JToken> nodes)\r\n        {\r\n            foreach (var jToken in nodes)\r\n            {\r\n                var model = parser.GetNodeChildren(jToken).ToList();\r\n                var modelName = model[0].First.ToString();\r\n                var entity = new Node(modelName);\r\n                var modelAttributes = model[1].First.Children().ToList();\r\n                foreach (var modelAttribute in modelAttributes)\r\n                {\r\n                    entity.AddAttribute(modelAttribute.First.First.ToString(), modelAttribute.Last.First.ToString());\r\n                }\r\n            }\r\n        }\r\n\r\n        static void FindLinks(JToken jsonObject)\r\n        {\r\n            var parser = new JsonParser();\r\n            var links = parser.GetLinks(jsonObject).ToList();\r\n            InitialiseLinks(parser, links);\r\n        }\r\n\r\n        static void InitialiseLinks(JsonParser parser, List<JToken> links)\r\n        {\r\n            foreach (var jToken in links)\r\n            {\r\n                var link = parser.GetLinkChildren(jToken).ToList();\r\n                var linkName = link[0].First.ToString();\r\n                var source = link[1].First.ToString();\r\n                var destination = link[2].First.ToString();\r\n                var entity = new Link(linkName, source, destination);\r\n                var modelAttributes = link[3].First.Children().ToList();\r\n                foreach (var modelAttribute in modelAttributes)\r\n                {\r\n                    entity.AddAttribute(modelAttribute.First.First.ToString(), modelAttribute.Last.First.ToString());\r\n                }\r\n            }\r\n        }\r\n\r\n        static void RunRelations()\r\n        {\r\n            var fileReader = new FileReader(\"Relations.json\");\r\n            fileReader.LoadJsonFile();\r\n            var jsonObject = fileReader.GetJsonObject();\r\n            FindMappingNodes(jsonObject);\r\n            FindMappingLinks(jsonObject);\r\n        }\r\n\r\n        static void FindMappingNodes(JToken jsonObject)\r\n        {\r\n            var parser = new JsonParser();\r\n            var mappingNodes = parser.GetNodes(jsonObject).ToList();\r\n            InitialiseMappingNodes(parser, mappingNodes);\r\n        }\r\n\r\n        static void InitialiseMappingNodes(JsonParser parser, List<JToken> nodes)\r\n        {\r\n            foreach (var jToken in nodes)\r\n            {\r\n                var model = parser.GetNodeChildren(jToken).ToList();\r\n                var name = model[0].First.ToString();\r\n                var dataModelName = model[1].First.ToString();\r\n                var entity = new MappingNode(name, dataModelName);\r\n                var modelAttributes = model[2].First.Children().ToList();\r\n                foreach (var modelAttribute in modelAttributes)\r\n                {\r\n                    entity.AddAttribute(modelAttribute.First.ToString(), modelAttribute.First.Next.ToString(),\r\n                        modelAttribute.Last.ToString());\r\n                }\r\n            }\r\n        }\r\n\r\n        static void FindMappingLinks(JToken jsonObject)\r\n        {\r\n            var parser = new JsonParser();\r\n            var mappingLinks = parser.GetLinks(jsonObject).ToList();\r\n            InitialiseMappingLinks(parser, mappingLinks);\r\n        }\r\n\r\n        static void InitialiseMappingLinks(JsonParser parser, List<JToken> nodes)\r\n        {\r\n            foreach (var jToken in nodes)\r\n            {\r\n                var model = parser.GetLinkChildren(jToken).ToList();\r\n                var name = model[0].First.ToString();\r\n                var sourceNode = model[1].First.ToString();\r\n                var destinationNode = model[2].First.ToString();\r\n                var entity = new MappingLink(name, sourceNode, destinationNode);\r\n\r\n\r\n                var attributes = model[2].First.Children().ToList();\r\n                foreach (var attribute in attributes)\r\n                {\r\n                    entity.AddAttribute(attribute.First.ToString(), attribute.Last.ToString());\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Program/Program.cs b/Program/Program.cs
--- a/Program/Program.cs	(revision 2863722e10edee7094bcb390b3e4aab7f1ebdd04)
+++ b/Program/Program.cs	(date 1619967819621)
@@ -14,9 +14,6 @@
     {
         static void Main(string[] args)
         {
-            var uri = new Uri("http://localhost:9200");
-            var connectionSettings = new ConnectionSettings(uri);
-            var ok = new ElasticClient(connectionSettings);
             RunModelsAndLinks();
             RunRelations();
             NestClientFactory.GetInstance().CreateInitialClient();
